import paramiko
import logging
import random
import string
import os
from config import MAIL_DB_USER, MAIL_DB_PASSWORD, MAIL_DEFAULT_DOMAIN  # –ò–º–ø–æ—Ä—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –∏–∑ .env

logger = logging.getLogger(__name__)

def generate_password(length=10):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è."""
    return ''.join(random.choice(string.ascii_letters + string.digits) for _ in range(length))

def ensure_mailbox_format(mailbox_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –ø—Ä–∏–≤–æ–¥–∏—Ç mailbox_name –∫ —Ñ–æ—Ä–º–∞—Ç—É mailbox_name@domain.com."""
    if "@" not in mailbox_name:
        mailbox_name = f"{mailbox_name}@{MAIL_DEFAULT_DOMAIN}"
    return mailbox_name

def execute_ssh_command(command, ssh_config):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã —á–µ—Ä–µ–∑ SSH."""
    try:
        ssh = paramiko.SSHClient()
        ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())
        ssh.connect(
            ssh_config["host"],
            port=ssh_config["port"],
            username=ssh_config["username"],
            key_filename=ssh_config["key_path"]
        )
        stdin, stdout, stderr = ssh.exec_command(command)
        result = stdout.read().decode('utf-8').strip()
        error = stderr.read().decode('utf-8').strip()
        ssh.close()
        return result, error
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ SSH: {e}")
        return None, str(e)

def create_mailbox(mailbox_name, password, ssh_config):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞."""
    mailbox_name = ensure_mailbox_format(mailbox_name)
    
    command = (
        f'sudo docker exec onlyoffice-mail-server python /usr/src/iRedMail/tools/scripts/create_mailboxes.py '
        f'-d "onlyoffice-mysql-server" -u "{MAIL_DB_USER}" -p "{MAIL_DB_PASSWORD}" '
        f'-dn "onlyoffice_mailserver" -mba "{mailbox_name}" -mbp "{password}"'
    )
    result, error = execute_ssh_command(command, ssh_config)

    if error:
        return {"success": False, "message": error}
    if f"User '{mailbox_name}' exist" in result:
        return {"success": False, "message": f"–Ø—â–∏–∫ {mailbox_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç."}
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    connection_settings = (
        f"**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:**\n"
        f"üì© **IMAP**: 143 (STARTTLS)\n"
        f"üì§ **SMTP**: 587 (STARTTLS)\n"
        f"üîë **–ú–µ—Ç–æ–¥ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏**: –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä–æ–ª—å"
    )
    
    return {
        "success": True,
        "address": mailbox_name,
        "password": password,
        "message": f"‚úÖ –ü–æ—á—Ç–æ–≤—ã–π —è—â–∏–∫ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\nüìß **Email**: {mailbox_name}\nüîë **–ü–∞—Ä–æ–ª—å**: {password}\n\n{connection_settings}"
    }

def reset_password(mailbox_name, new_password, ssh_config):
    """–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –ø–æ—á—Ç–æ–≤–æ–≥–æ —è—â–∏–∫–∞."""
    mailbox_name = ensure_mailbox_format(mailbox_name)

    command = (
        f'sudo docker exec onlyoffice-mail-server python /usr/src/iRedMail/tools/scripts/change_passwords.py '
        f'-d "onlyoffice-mysql-server" -u "{MAIL_DB_USER}" -p "{MAIL_DB_PASSWORD}" '
        f'-dn "onlyoffice_mailserver" -mba "{mailbox_name}" -mbp "{new_password}"'
    )
    result, error = execute_ssh_command(command, ssh_config)

    if error:
        return {"success": False, "message": error}
    if "password has been changed" in result:
        return {
            "success": True,
            "address": mailbox_name,
            "new_password": new_password,
            "message": "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω."
        }

    return {"success": False, "message": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å."}
